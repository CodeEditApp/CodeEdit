//
//  CETaskRun.swift
//  CodeEdit
//
//  Created by Axel Martinez on 4/2/24.
//

import Foundation

/// Stores the state of a task once it's executed
class CETaskRun: ObservableObject {
    /// The name of the associated task.
    let task: any CETask

    /// The current progress of the task.
    @Published private(set) var output: String  = ""

    /// The status of the task.
    @Published private(set) var status: CETaskStatus = .stopped

    /// The process percent of the task.
    @Published private(set) var progress: CGFloat = 0

    //TODO: replace these counts with the actual errors/warnings
    /// The errors generated by a task run if any.
    @Published private(set) var errors: Int = 0

    /// The warnings generated by a task if any.
    @Published private(set) var warnings: Int = 0

    init(task: any CETask) {
        self.task = task
    }

    func start() async throws {
        await MainActor.run {
            self.status = .running
        }

        try await task.execute(self)

        await MainActor.run {
            if errors > 0 {
                self.status = .failed
            } else {
                self.status = .finished
            }
        }
    }

    /// Updates the progress and output values on the main thread`
    func updateProgress(_ output: String, progress: Double) async {
        await MainActor.run {
            self.progress = progress
            self.output = output
        }
    }

    /// Updates the erros and warning counts on the main thread`
    func updateErrorsAndWarnings(errors: Int, warnings: Int) async {
        await MainActor.run {
            self.errors = errors
            self.warnings = warnings
        }
    }
}
